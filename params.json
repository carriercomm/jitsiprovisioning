{"name":"Openfire Jitsi Provisioning","tagline":"Openfire Plugin","body":"<h2>Overview</h2>\r\n\r\n<p>\r\n\tThe Jitsi Provisioning Plugin for Openfire server provides the ability to authenticate users and provision the Jitsi client according to the Enterprise Needs. Provisioning is the feature that allows network and provider administrators to remotely configure Jitsi instances that they are responsible for.\r\n\tJitsi’s provisioning module uses http. This means that, based on a few parameters like an IP or a mac layer address, or a user name and a password, this Plugin can feed to a freshly installed Jitsi all the details that it needs in order to start making calls, downloading updates or configure codec preferences.\r\n\t\r\n</p>\r\n\r\n<h2>Installation</h2>\r\n\r\n<p>Copy jitsiprovisioning.jar into the plugins directory of your Openfire server. The\r\nplugin will then be automatically deployed. To upgrade to a new version, copy the new\r\njitsiprovisioning.jar file over the existing file.</p>\r\n\r\n<h2>Configuration</h2>\r\n\r\nAccess to the service is restricted with a \"secret\" that can be viewed and \r\nset from the User Service page in the Openfire admin console.  This page is\r\nlocated on the admin console under \"Server\" and then \"Server Settings\".\r\nThis should really only be considered weak security. The plugin was initially written with the assumption that http access to the Openfire service was\r\nonly available to trusted machines. In the case of the plugin's author, a web application running on the same server as \r\nOpenfire makes the request.\r\n\r\n<h2>Using the Plugin</h2>\r\n\r\nTo authenticate users and get the Jitsi provisioning details, submit HTTP/HTTPS requests to the jitsiprovisioning provisioning service. \r\nA provisioning service is an HTTP or HTTPS URL optionally followed by several parameters. The URI would most often point to a provisioning server-side script. Please note that we strongly recommend you only use HTTPS unless you have very good reasons not to. Provisioning POST requests generally contain sensitive information like passwords and you definitely don’t want that being sent in clear text.\r\n\r\nThe service address is [hostname]plugins/jitsiProvisioning/provision. For example,\r\nif your server name is \"example.com\", the URL is http://example.com/plugins/jitsiProvisioning/provision/?user=${username}&password=${password}&secret=bigsecret<p>\r\n\r\n<h2>Provisioning URI and parameters</h2>\r\n<p>\r\n\tThe easiest way to have Jitsi connect to a provisioning server is to configure the provisioning URL in its configuration form. Jitsi also supports automatic provisioning discovery via DHCP and Bonjour. To do so, go to options => advanced => provisioning and check “Enable provisioning” (if not already checked), then select “Manually specify provisioning URI” and enter a URI.<p>\r\n\r\n\r\n<p><b>Sample HTML</b><p>\r\n\r\nThe following example athenticates user xyx and on success server returns provisioning data\r\n\r\n<ul>\r\n<form>\r\n<textarea cols=65 rows=3 wrap=virtual>\r\nhttp://example.com:9090/plugins/jitsiProvisioning/provisioning/?user=xyz&password=xyz&secret=bigsecret\r\n</textarea>\r\n</form>\r\n</ul>\r\n\r\n<br><br>\r\n* When sending double characters (Chinese/Japanese/Korean etc) you should URLEncode the string as utf8.<br> \r\nIn Java this is done like this<br> \r\nURLEncoder.encode(username, \"UTF-8\"));\r\n<br>If the strings are encoded incorrectly, double byte characters will look garbeled in the Admin Console.\r\n\r\n\r\n<h2>Server Reply</h2>\r\n\r\nThe server will reply to all User Service requests with an plain/text. \r\nIf the request was processed successfully the return will be a provisioning text.\r\nIf the request was unsuccessful, the response will be 401 and plain/text with error message.\r\n<p>\r\n\r\n\r\n<div id=\"datatable\">\r\n<table cellpadding=\"3\" cellspacing=\"1\" border=\"0\" width=\"700\">\r\n<tr>\r\n    <th >Error String 401 response</th><th>Description</th>\r\n</tr>\r\n<tr>\r\n    <td class=\"name\">ConnectionException</td>\r\n    <td>Unable to connect to the Database/LDAP to authenticate the user</td>\r\n</tr>\r\n<tr>\r\n    <td class=\"name\">InternalUnauthenticatedException</td>\r\n    <td>Internal authentication error</td>\r\n</tr>\r\n<tr>\r\n    <td class=\"name\">UnauthorizedException</td>\r\n    <td>Invalid Username/Password. \r\n    </td>\r\n</tr>\r\n<tr>\r\n    <td class=\"name\">RequestNotAuthorised</td>\r\n    <td>The supplied secret does not match the secret specified in the Admin Console or the requester is not a valid IP address.</td>\r\n</tr>\r\n</table><p>\r\n<p>\r\n<h2>References</h2>\r\n<a href=\"https://jitsi.org/Documentation/Provisioning\">Click here to know more about Jitsi Provisioning</a>\r\n<br>\r\n<a href=\"http://www.igniterealtime.org/projects/openfire/\">Click here to know more about Openfire server</a>\r\n</p>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}